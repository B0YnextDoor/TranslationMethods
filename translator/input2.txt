section .data
    ; Числовые литералы
    str_val db "Hello, NASM!", 0  ; Строковый литерал (нулевой терминатор)

    ; Разные типы данных
    byte_val dw 128
    counter equ 5   ; Константа для цикла

section .text
    global _start

_start:
    ; Вывод строки (str_val) на экран
    mov eax, 4          ; syscall: sys_write
    mov ebx, 1          ; дескриптор stdout
    mov ecx, str_val    ; указатель на строку
    mov edx, 13         ; длина строки
    int 0x80            ; вызов ядра
    ; Арифметические операции
    mov ax, byte_val  ; Загрузка байтового значения
    add ax, 5        ; Прибавление 5
    sub ax, 5         ; Вычитание 5
    imul ax, 2        ; Умножение на 2 (знаковое)
    idiv ax           ; Деление (знаковое)
    inc ax           ; Инкремент
    dec ax            ; Декремент
    neg ax            ; Изменение знака
    ; Побитовые операции
    and ax, 0x0F      ; Побитовое И
    or ax, 0xF0       ; Побитовое ИЛИ
    xor ax, 0xAA      ; Побитовый XOR
    not ax            ; Побитовое НЕ
    shl ax, 1         ; Сдвиг влево
    shr ax, 1         ; Сдвиг вправо
    sar ax, 1         ; Арифметический сдвиг вправо
    sal ax, 1         ; Арифметический сдвиг влево
    ; Логические операции
    mov ax, 99
    cmp ax, 100       ; Сравнение с 100
    je _equal         ; Переход, если равно
    jg _greater       ; Переход, если больше
    jl _less          ; Переход, если меньше
_equal:
    mov ax, 'E'       ; Устанавливаем 'E' в AL
    jmp _end          ; Переход к завершению
_greater:
    mov ax, 'G'       ; Устанавливаем 'G' в AL
    jmp _end          ; Переход к завершению
_less:
    mov ax, 'L'       ; Устанавливаем 'L' в AL
    mov ecx, counter  ; Устанавливаем счетчик
_loop:
    dec ecx           ; Уменьшаем счетчик
    cmp ecx, 0        ; Проверяем, не ноль ли
    jne _loop         ; Если не ноль, повторяем
    ; Операции с памятью
    mov eax, [byte_val] ; Загрузка 8-битного значения
    push eax             ; Сохранение в стек
    pop ebx              ; Извлечение из стека
    ; Завершение программы
_end:
    mov eax, 1          ; syscall: sys_exit
    xor ebx, ebx        ; код возврата 0
    int 0x80            ; вызов ядра

