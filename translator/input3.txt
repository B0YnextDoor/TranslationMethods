section .data
    ; Исходные данные
    arr db 30, 20, 50, 40, 10   ; Массив из 5 чисел
    arr_size equ 5               ; Размер массива

    ; Строки для вывода
    msg_sum db "Sum of array elements: %d", 10, 0
    msg_avg db "Average of array elements: %d", 10, 0
    msg_max db "Max element in array: %d", 10, 0

section .text
    global main
    extern printf

main:
    ; Вывод суммы элементов массива
    call sum_array          ; Вызов функции для суммы элементов массива
    push eax                ; Пушим результат суммы на стек
    push msg_sum            ; Строка формата для вывода суммы
    call printf             ; Вызов printf
    call average_array      ; Вызов функции для среднего значения
    push eax                ; Пушим результат среднего на стек
    push msg_avg            ; Строка формата для вывода среднего
    call printf             ; Вызов printf
    ; Вывод максимального значения массива
    call find_max ; Вызов функции для поиска максимума
    push eax                ; Пушим результат максимума на стек
    push msg_max            ; Строка формата для вывода максимума
    call printf             ; Вызов printf
    ; Завершение программы
    ret
; Функция для подсчета суммы элементов массива
sum_array:
    xor eax, eax            ; Очистка eax (сумма = 0)
    mov ecx, arr_size       ; Количество элементов в массиве
    mov ebx, arr            ; Указатель на массив
.loop_sum:
    add eax, [ebx]          ; Прибавляем текущий элемент массива
    inc ebx                 ; Переходим к следующему элементу
    loop .loop_sum          ; Повторяем пока не обработаем все элементы
    ret
; Функция для вычисления среднего значения массива
average_array:
    call sum_array      ; Вычисление суммы элементов массива
    mov ecx, arr_size   ; Количество элементов в массиве
    xor edx, edx        ; Очистка edx (регистр для остатка от деления)
    idiv ecx             ; Делим eax (сумма) на количество элементов (ecx)
    ret
; Функция для нахождения максимального элемента массива
find_max:
    mov eax, [arr] ; Инициализация максимума первым элементом массива
    mov ebx, arr ; Указатель на массив
    mov ecx, arr_size ; Количество элементов в массиве
.loop_max:
    cmp eax, [ebx] ; Сравниваем текущий элемент с максимальным
    jge .skip_max ; Если элемент меньше или равен максимальному, пропускаем
    mov eax, [ebx] ; Обновляем максимальный элемент
.skip_max:
    inc ebx ; Переходим к следующему элементу
    loop .loop_max ; Повторяем для всех элементов массива
    ret
